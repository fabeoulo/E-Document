package com.advantech.model.db2;
// Generated 2017/4/7 下午 02:26:06 by Hibernate Tools 4.3.1

import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import org.apache.commons.lang3.ObjectUtils;

/**
 * Flow generated by hbm2java
 */
@Entity
@Table(name = "Flow",
        uniqueConstraints = @UniqueConstraint(columnNames = "name")
)
@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id", scope = FlowM4f.class)
public class FlowM4f implements java.io.Serializable, Comparable<FlowM4f> {

    private int id;
    private FlowGroupM4f flowGroup;
    private String name;

    @JsonIgnore
    private Set<WorktimeM4f> worktimesForTestFlowId = new HashSet<WorktimeM4f>(0);

    @JsonIgnore
    private Set<WorktimeM4f> worktimesForPackingFlowId = new HashSet<WorktimeM4f>(0);

    @JsonIgnore
    private Set<FlowM4f> flowsForTestFlowId = new HashSet<FlowM4f>(0);

    @JsonIgnore
    private Set<FlowM4f> flowsForBabFlowId = new HashSet<FlowM4f>(0);

    @JsonIgnore
    private Set<WorktimeM4f> worktimesForBabFlowId = new HashSet<WorktimeM4f>(0);

    public FlowM4f() {
    }

    public FlowM4f(int id) {
        this.id = id;
    }

    public FlowM4f(int id, FlowGroupM4f flowGroup, String name, Set<WorktimeM4f> worktimesForTestFlowId, Set<WorktimeM4f> worktimesForPackingFlowId, Set<FlowM4f> flowsForTestFlowId, Set<FlowM4f> flowsForBabFlowId, Set<WorktimeM4f> worktimesForBabFlowId) {
        this.id = id;
        this.flowGroup = flowGroup;
        this.name = name;
        this.worktimesForTestFlowId = worktimesForTestFlowId;
        this.worktimesForPackingFlowId = worktimesForPackingFlowId;
        this.flowsForTestFlowId = flowsForTestFlowId;
        this.flowsForBabFlowId = flowsForBabFlowId;
        this.worktimesForBabFlowId = worktimesForBabFlowId;
    }

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id", unique = true, nullable = false)
    public int getId() {
        return this.id;
    }

    public void setId(int id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "flow_group_id")
    public FlowGroupM4f getFlowGroup() {
        return this.flowGroup;
    }

    public void setFlowGroup(FlowGroupM4f flowGroup) {
        this.flowGroup = flowGroup;
    }

    @Column(name = "[name]", length = 100)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "flowByTestFlowId")
    public Set<WorktimeM4f> getWorktimesForTestFlowId() {
        return this.worktimesForTestFlowId;
    }

    public void setWorktimesForTestFlowId(Set<WorktimeM4f> worktimesForTestFlowId) {
        this.worktimesForTestFlowId = worktimesForTestFlowId;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "flowByPackingFlowId")
    public Set<WorktimeM4f> getWorktimesForPackingFlowId() {
        return this.worktimesForPackingFlowId;
    }

    public void setWorktimesForPackingFlowId(Set<WorktimeM4f> worktimesForPackingFlowId) {
        this.worktimesForPackingFlowId = worktimesForPackingFlowId;
    }

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "Flow_REF", joinColumns = {
        @JoinColumn(name = "bab_flow_id", nullable = false, updatable = false)}, inverseJoinColumns = {
        @JoinColumn(name = "test_flow_id", nullable = false, updatable = false)})
    public Set<FlowM4f> getFlowsForTestFlowId() {
        return this.flowsForTestFlowId;
    }

    public void setFlowsForTestFlowId(Set<FlowM4f> flowsForTestFlowId) {
        this.flowsForTestFlowId = flowsForTestFlowId;
    }

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "Flow_REF", joinColumns = {
        @JoinColumn(name = "test_flow_id", nullable = false, updatable = false)}, inverseJoinColumns = {
        @JoinColumn(name = "bab_flow_id", nullable = false, updatable = false)})
    public Set<FlowM4f> getFlowsForBabFlowId() {
        return this.flowsForBabFlowId;
    }

    public void setFlowsForBabFlowId(Set<FlowM4f> flowsForBabFlowId) {
        this.flowsForBabFlowId = flowsForBabFlowId;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "flowByBabFlowId")
    public Set<WorktimeM4f> getWorktimesForBabFlowId() {
        return this.worktimesForBabFlowId;
    }

    public void setWorktimesForBabFlowId(Set<WorktimeM4f> worktimesForBabFlowId) {
        this.worktimesForBabFlowId = worktimesForBabFlowId;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 97 * hash + Objects.hashCode(this.name);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final FlowM4f other = (FlowM4f) obj;
        if (Objects.equals(this.id, other.id)) {
            return true;
        }
        if (!Objects.equals(this.name, other.name)) {
            return false;
        }
        return true;
    }

    @Override
    public int compareTo(FlowM4f o) {
        return ObjectUtils.compare(this.id, o.getId());
    }

}
